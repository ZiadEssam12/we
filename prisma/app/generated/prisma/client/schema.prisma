datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "app/generated/prisma/client" // Change this path to whatever you want
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}

enum Status {
  ACTIVE
  PENDING
}

model User {
  id          String    @id @default(cuid())
  userName    String    @unique
  password    String
  name        String?
  phoneNumber String?
  role        UserRole  @default(USER)
  accounts    Account[]
  sessions    Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MajorCabinet {
  id                          String  @id @default(cuid())
  central                     String
  village                     String
  cabinet                     String
  central_to_cabinet_distance String
  number_of_joints            Int
  joint_location              String // Stores "lat,lng" pairs
  rooms                       String
  room_location               String // Stores "lat,lng" pairs
  entitlement                 String
  distance                    String
  status                      Status  @default(PENDING)
  responsible                 String? // Optional field
  notes                       String  @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([central])
  @@index([village])
}

model SecondaryCabinet {
  id                      String  @id @default(cuid())
  central                 String
  village                 String
  port_gbon               String
  cabinet                 String
  splitter_number         String
  splitter_port           String
  distance                String
  box_number              String
  cabinet_location        String
  box_location            String
  cabinet_to_box_distance String
  responsible             String?
  status                  Status  @default(PENDING)

  notes String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([central])
  @@index([village])
  @@index([cabinet])
}

model MobileTower {
  id          String  @id @default(cuid())
  central     String
  cable_name  String
  tower_code  String
  company     String
  entitlement String
  distance    String
  address     String
  location    String // Stores "lat,lng" pairs
  responsible String?
  status      Status  @default(PENDING)

  notes String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([central])
  @@index([tower_code])
  @@index([company])
}

model CopperLine {
  id                String  @id @default(cuid())
  landline_number   String
  central           String
  village           String
  cabinet_number    String
  port_number       String
  terminal_number   String
  cabinet_location  String
  box_number        String
  box_entitlement   String
  box_location      String
  joint_location    String
  joint_entitlement String
  joint_depth       String
  room_location     String
  insulation_level  String
  responsible       String?
  status            Status  @default(PENDING)

  notes String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([landline_number])
  @@index([central])
  @@index([village])
  @@index([cabinet_number])
}
